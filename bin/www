#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("mondu-node:server");
var http = require("http");
var axios = require("axios");

/**
 * Get port and hostname from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
var hostname = process.env.HOSTNAME; // New: Get hostname from environment
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  // Check if the HOSTNAME environment variable is present
  if (hostname) {
    // If the hostname is provided, assume it's connected to the internet
    console.log(`Using provided hostname for external access: ${hostname}`);
    global.publicUrl = `http://${hostname}`;
  } else if (process.env.NODE_ENV !== "production") {
    // Setup localtunnel only in development
    setupLocalTunnel(port);
  }
});

server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Setup localtunnel for redirects back to the local machine.
 */
async function setupLocalTunnel(port) {
  const localtunnel = require("localtunnel");

  try {
    const tunnel = await localtunnel({ port: port });
    console.log(
      "Setting up localtunnel for redirects back to the local machine",
    );
    console.log(`Public URL: ${tunnel.url}`);

    try {
      const response = await axios.get("https://icanhazip.com");
      console.log(`Public IP: ${response.data.trim()}`);
    } catch (error) {
      console.error(`Error fetching public IP: ${error}`);
    }

    // Set the public URL to a global variable
    global.publicUrl = tunnel.url;
  } catch (error) {
    console.error(`Error setting up localtunnel: ${error}`);
  }
}
